import asyncio
import decimal
import math
import pprint
from datetime import datetime, timedelta
from random import randint

import aiogram
import pytz
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import BotBlocked
from tinvest import Candle

from tgbot.config import load_config, Config
from tgbot.misc.tinkoff import get_candles_inrange
from tgbot.models.analytic import Analytic, Prediction
from tgbot.services.database import create_db_session
from tgbot.misc import tinkoff


async def check_predicts():
    pass

    # –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥–∏–∫—Ç–∞–º (is_active, end_date = none, predicted_date + 1day < datetime.now())
    #     –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–∏–∫—Ç–∞ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫.  end_date = datetime.now -1
    #     –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    ####–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ (is active, end_date = none)


class PredictionAnalys():
    def __init__(self, best_candle, first_candle_morethen_predicted, prediction_index):
        self.best_candle = best_candle
        self.first_candle_morethen_predicted = first_candle_morethen_predicted
        self.prediction_index = prediction_index

    best_candle: Candle
    first_candle_morethen_predicted: Candle
    prediction_index: decimal


async def predictions_active():
    config: Config = load_config()
    db_session = await create_db_session(config)
    # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ is_active
    predictions: list[Prediction] = await Prediction.get_active_predicts(db_session=db_session)
    for prediction in predictions:
        print(f' –ø—Ä–µ–¥–∏–∫—Ç: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {prediction.predicted_value}. {prediction}, {prediction.__dict__}')
        to_date = prediction.start_date
        isLong = math.copysign(1, (prediction.predicted_value - prediction.start_value))
        print(to_date)
        predictionanalysis: PredictionAnalys = await prediction_candle_analys(prediction, config)

        if not predictionanalysis:
            continue
        # –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–∏–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ —Ç–∞—Å–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —É—Ç—Ä–æ–º –ø–æ—Å–ª–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–≤–µ—á–∏.
        if prediction.predicted_date <= datetime.now():
            # –µ—Å–ª–∏ –ø—Ä–µ–¥–∏–∫—Ç –≤—Å—ë —Ç–∞–∫–∏ —Å–±—ã–ª—Å—è (–∏–Ω–¥–µ–∫—Å 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)
            if predictionanalysis.prediction_index <= 0:
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π "–ø—Ä–æ–±–∏–≤–Ω–æ–π" —Å–≤–µ—á–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π–ø—Ä–µ–¥–∏–∫—Ç —Å–±—ã–ª—Å—è
                end_date = predictionanalysis.first_candle_morethen_predicted.time.replace(tzinfo=None)
                # –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–º—É
                end_value = prediction.predicted_value
                successful = True
                await Prediction.update_predict(db_session,
                                                successful=successful,
                                                end_value=end_value,
                                                end_date=end_date,
                                                id=prediction.id)
                # print(f'–ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ü–†–ï–î–ò–ö–¢ –ò–ó–ú–ï–ù–ï–ù –í –ë–ê–ó–ï: {prediction.__dict__}')
                print(f'–ø—Ä–æ–≥–Ω–æ–∑ —Å–±—ã–ª—Å—è: {type(end_date)}')
            else:  # –µ—Å–ª–∏ –Ω–µ —Å–±—ã–ª—Å—è - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞.
                end_date = prediction.predicted_date
                end_value = await tinkoff.get_latest_cost_history(figi=prediction.figi,
                                                                  config=config,
                                                                  to_time=prediction.predicted_date)
                # if isLong > 0:
                #     end_value = predictionanalysis.best_candle.h
                # else:
                #     end_value = predictionanalysis.best_candle.l
                successful = False
                await Prediction.update_predict(db_session,
                                                successful=successful,
                                                end_value=end_value,
                                                end_date=end_date,
                                                id=prediction.id)
                # print(f'–ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ü–†–ï–î–ò–ö–¢ –ò–ó–ú–ï–ù–ï–ù –í –ë–ê–ó–ï: {prediction.__dict__}')
                print(f'–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥: {end_value}')
                print(f'–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–±—ã–ª—Å—è: {end_date.date()}')

        else:  # –µ—Å–ª–∏ —Å–∫—Ä–æ –ø—Ä–µ–¥–∏–∫—Ç–∞ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫
            if predictionanalysis.prediction_index <= 0:
                end_date = predictionanalysis.first_candle_morethen_predicted.time.replace(tzinfo=None)
                print(f'–ø—Ä–æ–≥–Ω–æ–∑ —Å–±—ã–ª—Å—è —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏{type(end_date)}')
                end_value = prediction.predicted_value
                successful = True
                await Prediction.update_predict(db_session,
                                                successful=successful,
                                                end_value=end_value,
                                                end_date=end_date,
                                                id=prediction.id)
                # print(f'–ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ü–†–ï–î–ò–ö–¢ –ò–ó–ú–ï–ù–ï–ù –í –ë–ê–ó–ï: {prediction.__dict__}')

            else:
                print(f'pass')
                pass


# if predict-date + 1day < datetime.now() (—Å—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏—Å—Ç—ë–∫):


# if prediction.predicted_date
# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º end_value(–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ), end_date = today
# if predict-date + 1day >= datetime.now()
# –µ—Å–ª–∏ |predicted_value| < current_maximum (–ø—Ä–µ–¥–∏–∫—Ç —Å–±—ã–ª–∞—Å—è)
# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É end_value, end_date.
# –µ—Å–ª–∏ –Ω–µ—Ç:
# –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ

# –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–∏–∫—Ç–∞–º (is_active, end_date != None)
# –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥. is_active = false
# –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.

async def predictions_active_finished():
    config: Config = load_config()
    print(config.tg_bot.token)
    bot = Bot(token=config.tg_bot.token, parse_mode='HTML')
    channel_id = config.tg_bot.channel_id
    # await bot.kick_chat_member(chat_id=channel_id, user_id=2065163769, until_date=timedelta(seconds=31))
    # try:
    #     await bot.send_message(chat_id=2065163769, text=f'skljfksdjfksdj')
    # except BotBlocked:
    #     print(f'Bot –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!!!')
    db_session = await create_db_session(config)
    # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ is_active
    predictions: list[Prediction] = await Prediction.get_active_finished_predicts(db_session=db_session)
    for prediction in predictions:
        print(f' –ø—Ä–µ–¥–∏–∫—Ç: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {prediction.analytic.__dict__}, {prediction}, {prediction.__dict__}')
        analytic_id = prediction.analytic_id
        analytic = await Analytic.get_analytic_by_id(db_session=db_session, telegram_id=prediction.analytic_id)
        prediction_rating = await prediction.calculate_rating(analytic)
        try:
            if analytic.bonuscount>0:
                bonuscount=analytic.bonuscount-1
                if bonuscount==0:
                    await analytic.update_analytic(db_session=db_session, bonus=0, bonuscount=0)
                else:
                    await analytic.update_analytic(db_session=db_session, bonuscount=bonuscount)
        except TypeError:
            pass


        new_rating = await analytic.calculate_rating(prediction_rating)
        print(f' –ü–û–°–ß–ò–¢–ê–ù–ù–´–ô –†–ï–ô–¢–ò–ù–ì –ê–ù–ê–õ–ò–¢–ò–ö–ê {new_rating}')

        await Analytic.set_analytic_rating(db_session, rating=new_rating, telegram_id=analytic_id)
        await Prediction.update_predict_rating(db_session, id=prediction.id, rating=prediction_rating)
        updated_prediction = await Prediction.get_predict_by_id(db_session=db_session,
                                                                id=prediction.id)
        print(f'–°–¢–ê–†–´–ô –†–ï–ô–¢–ò–ù–ì {analytic.rating}')
        print(f' –ê–∞–ª–∏—Ç–∏–∫: —Å—Ç–∞—Ä–æ–µ: {analytic}, {analytic.__dict__}')
        updated_analytic = await Analytic.get_analytic_by_id(db_session, analytic_id)
        print(f'–ù–û–í–´–ô –†–ï–ô–¢–ò–ù–ì –ê–ù–ê–õ–ò–¢–ò–ö–ê {updated_analytic.rating}')
        rating_delta = updated_analytic.rating - analytic.rating
        print(f' –ê–∞–ª–∏—Ç–∏–∫: –Ω–æ–≤–æ–µ: {updated_analytic}, {updated_analytic.__dict__}')
        # new_text = updated_prediction.message_text

        message_id = updated_prediction.message_id
        message_url = updated_prediction.message_url
        if not message_id: #–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –≥–¥–µ –≤ –±–∞–∑–µ –Ω–µ—Ç—É message_id, message_url –∏ —Ç–µ–∫—Å—Ç–∞
            if prediction.successful:
                text = f'''üöÄ–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ü–∏–∏ <b>${updated_prediction.ticker}</b> —Å–±—ã–ª—Å—è ‚è±<b>{updated_prediction.end_date.date():%d-%m-%Y}</b>. 
üè¶–ü—Ä–æ–≥–Ω–æ–∑:<b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.end_value} {updated_prediction.currency}</b>
–†–µ–π—Ç–∏–Ω–≥ –ü—Ä–æ–≥–Ω–æ–∑–∞: <b>{updated_prediction.rating}</b>
–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: <b>{analytic.Nickname}</b>: <b>{analytic.rating}</b>‚û°<b>{updated_analytic.rating}</b>
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: <b>{updated_analytic.predicts_total}</b>.'''
            else:
                text = f'''üö´–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ü–∏–∏ <b>${updated_prediction.ticker}</b> –Ω–µ —Å–±—ã–ª—Å—è . 
üè¶–ü—Ä–æ–≥–Ω–æ–∑:<b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.predicted_value} {updated_prediction.currency}</b>
–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.end_value} {updated_prediction.currency}</b>
–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{updated_prediction.rating}</b>
–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ <b>{analytic.Nickname}</b>: <b>{analytic.rating}</b>‚û°<b>{updated_analytic.rating}</b>
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: <b>{updated_analytic.predicts_total}</b>.'''

            await bot.send_message(chat_id=channel_id,
                                   text=text)

            await bot.send_message(chat_id=channel_id,
                                   text=f'–ü—É–ª—å—Å ${updated_prediction.ticker}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [
                                           InlineKeyboardButton(text=f"Open in Tinkoff",
                                                                url=f'https://www.tinkoff.ru/invest/stocks/{updated_prediction.ticker}')
                                       ],
                                   ])
                                   )
        else: #–¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –∑–∞–ø–∏—Å—å—é –≤ –±–∞–∑—É ID —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç–∞ –∏ url
            # new_text = new_text.replace("&lt;", "<").replace("&gt;", ">")
            if prediction.successful:
                text_tochannel = f'''üöÄ–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ü–∏–∏ <b><a href="{message_url}">${updated_prediction.ticker}</a></b> —Å–±—ã–ª—Å—è ‚è±<b>{updated_prediction.end_date.date():%d-%m-%Y}</b>. 
üè¶–ü—Ä–æ–≥–Ω–æ–∑:<b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.end_value} {updated_prediction.currency}</b>
–†–µ–π—Ç–∏–Ω–≥ –ü—Ä–æ–≥–Ω–æ–∑–∞: <b>{updated_prediction.rating}</b>
–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: <b>{analytic.Nickname}</b>: <b>{analytic.rating}</b>‚û°<b>{updated_analytic.rating}</b>
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: <b>{updated_analytic.predicts_total}</b>.'''
            else:
                text_tochannel = f'''‚ùå–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ü–∏–∏ <b><a href="{message_url}">${updated_prediction.ticker}</a></b> –Ω–µ —Å–±—ã–ª—Å—è. 
üè¶–ü—Ä–æ–≥–Ω–æ–∑:<b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.predicted_value} {updated_prediction.currency}</b>
–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{updated_prediction.start_value} {updated_prediction.currency}</b>‚û°<b>{updated_prediction.end_value} {updated_prediction.currency}</b>
–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞: <b>{updated_prediction.rating}</b>
–†–µ–π—Ç–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ <b>{analytic.Nickname}</b>: <b>{analytic.rating}</b>‚û°<b>{updated_analytic.rating}</b>
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: <b>{updated_analytic.predicts_total}</b>.'''

            channel_message = await bot.send_message(chat_id=channel_id,
                                   text=text_tochannel)

            await bot.send_message(chat_id=channel_id,
                                   text=f'–ü—É–ª—å—Å ${updated_prediction.ticker}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [
                                           InlineKeyboardButton(text=f"Open in Tinkoff",
                                                                url=f'https://www.tinkoff.ru/invest/stocks/{updated_prediction.ticker}')
                                       ],
                                   ])
                                   )

            new_text = await updated_prediction.edit_message_text(db_session=db_session)
            if prediction.successful:
                await bot.edit_message_text(text=new_text + f'\n–°—Ç–∞—Ç—É—Å: üöÄ<b><a href="{channel_message.url}">–ó–ê–í–ï–†–®–ï–ù</a></b>',
                    chat_id=channel_id, message_id=message_id)
            else:
                await bot.edit_message_text(text=new_text + f'\n–°—Ç–∞—Ç—É—Å: ‚ùå<b><a href="{channel_message.url}">–ó–ê–í–ï–†–®–ï–ù</a></b>',
                    chat_id=channel_id, message_id=message_id)


# noinspection PyTypeChecker
async def prediction_candle_analys(prediction: Prediction, config: Config):
    print(prediction.start_date.date() + timedelta(days=2))
    print(datetime.now().date())
    if prediction.start_date.date() + timedelta(days=2) <= datetime.now().date():
        print('–±–æ–ª—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π')

        print(prediction.start_date + timedelta(hours=2))
        print(datetime.utcnow())
        isLong = math.copysign(1, (prediction.predicted_value - prediction.start_value))
        print(isLong)
        candles_lasthour = (
            await get_candles_inrange(figi=prediction.figi, from_=datetime.utcnow()+ timedelta(hours=-2),
                                      to=datetime.utcnow(),
                                      interval='minute',
                                      config=config)).candles

        candles_lasthour = [x for x in candles_lasthour if x.time.replace(tzinfo=None) <= datetime.now()]
        candles_lasthour = [x for x in candles_lasthour if x.time.replace(tzinfo=None) <= prediction.predicted_date]
        candles_firsthour = (
            await get_candles_inrange(figi=prediction.figi, from_=prediction.start_date + timedelta(hours=-1),
                                      to=(prediction.start_date + timedelta(hours=1)).replace(minute=59, second=0),
                                      interval='minute',
                                      config=config)).candles

        candles_firsthour = [x for x in candles_firsthour if x.time.replace(tzinfo=None) >= prediction.start_date]

        candles_hourly = (
            await get_candles_inrange(figi=prediction.figi, from_=prediction.start_date + timedelta(hours=1),
                                      to=prediction.start_date + timedelta(days=2),
                                      interval='hour',
                                      config=config)).candles

        candles_dayly = (
            await get_candles_inrange(figi=prediction.figi,
                                      from_=(prediction.start_date + timedelta(days=1)).replace(hour=23),
                                      to=datetime.now(),
                                      interval='day',
                                      config=config)).candles

        candles_dayly = [x for x in candles_dayly if x.time.replace(tzinfo=None) <= prediction.predicted_date]

        all_candles = candles_firsthour + candles_hourly + candles_dayly + candles_lasthour
        if not all_candles:
            predictionanalysis = None
            return predictionanalysis
        print(all_candles)
        if isLong > 0:
            bestcandle = max(all_candles, key=lambda item: item.h)
            candles_morethen_predicted = [x for x in all_candles if x.h >= prediction.predicted_value]
            print(f'maxof_candles.h: {bestcandle.h}')
        else:
            bestcandle = min(all_candles, key=lambda item: item.l)
            candles_morethen_predicted = [x for x in all_candles if x.l <= prediction.predicted_value]
            print(f'minof_candles_daily.h: {bestcandle.l}')

        if not candles_morethen_predicted:
            predictionanalysis = PredictionAnalys(bestcandle, bestcandle, prediction_index=1)
            return predictionanalysis

        first_candle_morethen_predicted = min(candles_morethen_predicted, key=lambda item: item.time)
        pprint.pprint(f'–ø–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–∏–∫—Ç —Å–±—ã–ª—Å—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è : {first_candle_morethen_predicted}')

        if isLong > 0:
            current_difference = prediction.predicted_value - bestcandle.h
        else:
            current_difference = prediction.predicted_value - bestcandle.l

        print(current_difference)
        predict_sign = decimal.Decimal(math.copysign(1, (prediction.predicted_value - prediction.start_value)))
        print(predict_sign)
        prediction_index = current_difference * predict_sign
        print(f'—Ç–µ–∫—É—â–∞—è –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–±—ã–ª—Å—è –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ): {prediction_index}')
        # –≤—ã—à–µ –º—ã –Ω–∞—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–≤–µ—á–µ–π –≤ –¥–≤—É—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö: –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–æ—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–≤–µ—á–∏. –í–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–∑ –Ω–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é Candle.h
        print(prediction.predicted_date.date() + timedelta(days=1))
        predictionAnalys: PredictionAnalys = PredictionAnalys(bestcandle, first_candle_morethen_predicted,
                                                              prediction_index)
        return predictionAnalys


    elif prediction.start_date + timedelta(hours=2) <= datetime.utcnow():
        print(f'–æ—Ç –¥–≤—É—Ö —á–∞—Å–æ–≤')
        print(prediction.start_date + timedelta(hours=2))
        print(datetime.utcnow())
        # to_time = (prediction.start_date + timedelta(hours=1)).replace(minute=59, second=0)
        # print(to_time)
        isLong = math.copysign(1, (prediction.predicted_value - prediction.start_value))
        print(isLong)
        candles_firsthour = (
            await get_candles_inrange(figi=prediction.figi, from_=prediction.start_date + timedelta(hours=-1),
                                      to=(prediction.start_date + timedelta(hours=1)).replace(minute=59, second=0),
                                      interval='minute',
                                      config=config)).candles

        candles_firsthour = [x for x in candles_firsthour if x.time.replace(tzinfo=None) >= prediction.start_date]

        candles_lasthour = (
            await get_candles_inrange(figi=prediction.figi, from_=datetime.utcnow() + timedelta(hours=-2),
                                      to=datetime.utcnow(),
                                      interval='minute',
                                      config=config)).candles

        candles_lasthour = [x for x in candles_lasthour if x.time.replace(tzinfo=None) <= datetime.now()]
        candles_lasthour = [x for x in candles_lasthour if x.time.replace(tzinfo=None) <= prediction.predicted_date]


        candles_hourly = (
            await get_candles_inrange(figi=prediction.figi, from_=prediction.start_date, to=datetime.utcnow(),
                                      interval='hour',
                                      config=config)).candles
        print(f'–ø–æ—á–∞—Å–æ–≤—ã–µ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ')

        candles_hourly = [x for x in candles_hourly if x.time.replace(tzinfo=None) <= prediction.predicted_date]

        all_candles = candles_firsthour + candles_hourly + candles_lasthour
        if not all_candles:
            predictionanalysis = None
            return predictionanalysis
        print(all_candles)
        if isLong > 0:
            bestcandle = max(all_candles, key=lambda item: item.h)
            candles_morethen_predicted = [x for x in all_candles if x.h >= prediction.predicted_value]
            print(f'maxof_candles.h: {bestcandle.h}')
        else:
            bestcandle = min(all_candles, key=lambda item: item.l)
            candles_morethen_predicted = [x for x in all_candles if x.l <= prediction.predicted_value]
            print(f'minof_candles_daily.h: {bestcandle.l}')

        if not candles_morethen_predicted:
            predictionanalysis = PredictionAnalys(bestcandle, bestcandle, prediction_index=1)
            return predictionanalysis

        first_candle_morethen_predicted = min(candles_morethen_predicted, key=lambda item: item.time)
        pprint.pprint(f'–ø–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–∏–∫—Ç —Å–±—ã–ª—Å—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è : {first_candle_morethen_predicted}')

        if isLong > 0:
            current_difference = prediction.predicted_value - bestcandle.h
        else:
            current_difference = prediction.predicted_value - bestcandle.l

        print(current_difference)
        predict_sign = decimal.Decimal(math.copysign(1, (prediction.predicted_value - prediction.start_value)))
        print(predict_sign)
        prediction_index = current_difference * predict_sign
        print(f'—Ç–µ–∫—É—â–∞—è –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–±—ã–ª—Å—è –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ): {prediction_index}')
        # –≤—ã—à–µ –º—ã –Ω–∞—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–≤–µ—á–µ–π –≤ –¥–≤—É—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö: –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–æ—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–≤–µ—á–∏. –í–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–∑ –Ω–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é Candle.h
        print(prediction.predicted_date.date() + timedelta(days=1))
        predictionAnalys: PredictionAnalys = PredictionAnalys(bestcandle, first_candle_morethen_predicted,
                                                              prediction_index)
        return predictionAnalys

    else:
        print('–º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å–æ–≤')
        to_time = (prediction.start_date + timedelta(hours=1)).replace(minute=59, second=0)
        print(to_time)
        isLong = math.copysign(1, (prediction.predicted_value - prediction.start_value))
        print(isLong)
        candles_firsthour = (
            await get_candles_inrange(figi=prediction.figi, from_=prediction.start_date + timedelta(hours=-2),
                                      to=datetime.utcnow(), interval='minute',
                                      config=config)).candles
        if not candles_firsthour:
            predictionanalysis = None
            return predictionanalysis

        print(f'dfgkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk')

        candles_firsthour = [x for x in candles_firsthour if x.time.replace(tzinfo=None) >= prediction.start_date]
        candles_firsthour = [x for x in candles_firsthour if x.time.replace(tzinfo=None) <= prediction.predicted_date]

        if not candles_firsthour:
            predictionanalysis = None
            return predictionanalysis
        else:
            if isLong > 0:
                bestcandle_firsthour = max(candles_firsthour, key=lambda item: item.h)
                candles_morethen_predicted_firsthour = [x for x in candles_firsthour if
                                                        x.h >= prediction.predicted_value]
            else:
                bestcandle_firsthour = min(candles_firsthour, key=lambda item: item.l)
                candles_morethen_predicted_firsthour = [x for x in candles_firsthour if
                                                        x.l <= prediction.predicted_value]
                print(bestcandle_firsthour.__dict__)
        pprint.pprint(f'—Å–≤–µ—á–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–∏–∫—Ç —Å–±—ã–ª—Å—è –∑–∞ –ø–µ—Ä–≤—ã–π —á–∞—Å: {candles_morethen_predicted_firsthour}')

        if not candles_morethen_predicted_firsthour:
            predictionanalysis = PredictionAnalys(bestcandle_firsthour, bestcandle_firsthour, prediction_index=1)
            return predictionanalysis

            ##<---- –≤–æ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–º—É –Ω—É–∂–Ω–æ(—Å–Ω–∏–∑—É)
        # try:
        first_candle_morethen_predicted = min(candles_morethen_predicted_firsthour, key=lambda item: item.time)

        if isLong > 0:
            current_difference = prediction.predicted_value - bestcandle_firsthour.h
        else:
            current_difference = prediction.predicted_value - bestcandle_firsthour.l
        print(current_difference)
        predict_sign = decimal.Decimal(math.copysign(1, (prediction.predicted_value - prediction.start_value)))
        print(predict_sign)
        prediction_index = current_difference * predict_sign
        print(f'—Ç–µ–∫—É—â–∞—è –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–±—ã–ª—Å—è –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ): {prediction_index}')
        # –≤—ã—à–µ –º—ã –Ω–∞—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–≤–µ—á–µ–π –≤ –¥–≤—É—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö: –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–æ—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å–≤–µ—á–∏. –í–∑—è–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–∑ –Ω–∏—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é Candle.h
        print(prediction.predicted_date.date() + timedelta(days=1))
        predictionAnalys: PredictionAnalys = PredictionAnalys(bestcandle_firsthour, first_candle_morethen_predicted,
                                                              prediction_index)
        return predictionAnalys
    # await message.bot.send_message(chat_id=channel_id,
    #                                text=text,
    #                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #                                    [
    #                                        InlineKeyboardButton(text="Open Tinkoff",
    #                                                             url=f'https://www.tinkoff.ru/invest/stocks/{ticker}')
    #                                    ],
    #                                ])
    #                                )


async def calculate_rating_job():
    await predictions_active()
    await predictions_active_finished()

#
# asyncio.run(predictions_active())
# asyncio.run(predictions_active_finished())
